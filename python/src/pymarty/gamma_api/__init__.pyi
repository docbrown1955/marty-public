from typing import Union, Optional, List
import enum

AnyExpr = Union[int, float, Expr]

class FierzBasis(enum.IntEnum):
    Standard = ...
    Chiral = ...

class Expr:
    def __init__(self, expr: Union[Expr, int, float]) -> None: ...
    def simplify(self) -> Expr: ...
    def order(self) -> Expr: ...
    def project(self, basis: FierzBasis) -> Expr: ...
    def to_latex(self) -> str: ...
    def __str__(self) -> str: ...
    def __neg__(self) -> Expr: ...
    def __add__(self, o: AnyExpr) -> Expr: ...
    def __radd__(self, o: AnyExpr) -> Expr: ...
    def __mul__(self, o: AnyExpr) -> Expr: ...
    def __rmul__(self, o: AnyExpr) -> Expr: ...
    def __sub__(self, o: AnyExpr) -> Expr: ...
    def __rsub__(self, o: AnyExpr) -> Expr: ...
    def __truediv__(self, o: AnyExpr) -> Expr: ...
    def __rtruediv__(self, o: AnyExpr) -> Expr: ...

# Options
def set_symbolic_dimension(keep_symbolic: bool) -> None: ...

# Tensors
def g(mu: int, nu: int) -> Expr: ...
def eps(mu: int, nu: int, rho: int, sigma: int) -> Expr: ...
def gamma(mu: int, nu: Optional[int] = None) -> Expr: ...
def gamma5() -> Expr: ...
def P_L() -> Expr: ...
def P_R() -> Expr: ...
def C() -> Expr: ...

# Fermion current definition
def current(gammas: List[Expr], left_index: int, right_index: int) -> Expr: ...

# Simplifications
def trace(gammas: List[Expr]) -> Expr: ...
def single_fierz(
    left_current: Expr, right_current: Expr, basis: FierzBasis = FierzBasis.Chiral
) -> Expr: ...
def double_fierz(
    left_current: Expr, right_current: Expr, basis: FierzBasis = FierzBasis.Chiral
) -> Expr: ...
def print_latex(latex_str: str) -> None: ...

__all__ = [
    "Expr",
    "set_symbolic_dimension",
    "g",
    "eps",
    "gamma",
    "gamma5",
    "P_L",
    "P_R",
    "C",
    "current",
    "simplify",
    "order",
    "project",
    "single_fierz",
    "double_fierz",
    "trace",
    "FierzBasis",
]
