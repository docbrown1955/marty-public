// This file is part of MARTY.
//
// MARTY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// MARTY is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with MARTY. If not, see <https://www.gnu.org/licenses/>.

/*!
 * @file
 * @author Gr√©goire Uhlrich
 * @version 2.0

 * \brief
 */
#pragma once

#include <iostream>

namespace csl {

void print_libcomplexop_hdata(std::ostream &out)
{
    out << "#ifndef LIBCOMPLEXOP_H_INCLUDED\n";
    out << "#define LIBCOMPLEXOP_H_INCLUDED\n";
    out << "\n";
    out << "#include <complex>\n";
    out << "#include <iostream>\n";
    out << "\n";
    out << "\n";
    out << "///////////////////////////////////////////////////\n";
    out << "// Mathematical functions\n";
    out << "///////////////////////////////////////////////////\n";
    out << "\n";
    out << "#ifdef QUAD\n";
    out << "#define MTY_REAL(x) crealq(x)\n";
    out << "#define MTY_IMAG(x) cimagq(x)\n";
    out << "#define MTY_POW(x, y) cpowq(x, y)\n";
    out << "#define MTY_COS(x) ccosq(x)\n";
    out << "#define MTY_SIN(x) csinq(x)\n";
    out << "#define MTY_ACOS(x) cacosq(x)\n";
    out << "#define MTY_ASIN(x) casinq(x)\n";
    out << "#define MTY_TAN(x) ctanq(x)\n";
    out << "#define MTY_ATAN(x) catanq(x)\n";
    out << "#define MTY_EXP(x) cexpq(x)\n";
    out << "#define MTY_LOG(x) clogq(x)\n";
    out << "#define MTY_COSH(x) ccoshq(x)\n";
    out << "#define MTY_ACOSH(x) cacoshq(x)\n";
    out << "#define MTY_SINH(x) csinhq(x)\n";
    out << "#define MTY_ASINH(x) casinhq(x)\n";
    out << "#define MTY_TANH(x) ctanhq(x)\n";
    out << "#define MTY_ATANH(x) catanhq(x)\n";
    out << "#else\n";
    out << "#define MTY_REAL(x) x.real()\n";
    out << "#define MTY_IMAG(x) x.imag()\n";
    out << "#define MTY_POW(x, y) std::pow(x, y)\n";
    out << "#define MTY_COS(x) std::cos(x)\n";
    out << "#define MTY_SIN(x) std::sin(x)\n";
    out << "#define MTY_ACOS(x) std::acos(x)\n";
    out << "#define MTY_ASIN(x) std::asin(x)\n";
    out << "#define MTY_TAN(x) std::tan(x)\n";
    out << "#define MTY_ATAN(x) std::atan(x)\n";
    out << "#define MTY_EXP(x) std::exp(x)\n";
    out << "#define MTY_LOG(x) std::log(x)\n";
    out << "#define MTY_COSH(x) std::cosh(x)\n";
    out << "#define MTY_ACOSH(x) std::acosh(x)\n";
    out << "#define MTY_SINH(x) std::sinh(x)\n";
    out << "#define MTY_ASINH(x) std::asinh(x)\n";
    out << "#define MTY_TANH(x) std::tanh(x)\n";
    out << "#define MTY_ATANH(x) std::atanh(x)\n";
    out << "#endif\n";
    out << "\n";
    out << "\n";
    out << "#ifdef QUAD\n";
    out << "\n";
    out << "///////////////////////////////////////////////////\n";
    out << "// quadruple - double / float operators\n";
    out << "///////////////////////////////////////////////////\n";
    out << "\n";
    out << "#include <quadmath.h>\n";
    out << "\n";
    out << "inline std::complex<__float128> operator+(\n";
    out << "        std::complex<__float128> const&c, \n";
    out << "        double                         a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c + std::complex<__float128>(a);\n";
    out << "}\n";
    out << "inline std::complex<__float128> operator+(\n";
    out << "        double                         a,\n";
    out << "        std::complex<__float128> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c + std::complex<__float128>(a);\n";
    out << "}\n";
    out << "\n";
    out << "inline std::complex<__float128> operator*(\n";
    out << "        std::complex<__float128> const&c, \n";
    out << "        double                         a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c * std::complex<__float128>(a);\n";
    out << "}\n";
    out << "inline std::complex<__float128> operator*(\n";
    out << "        double                         a,\n";
    out << "        std::complex<__float128> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c * std::complex<__float128>(a);\n";
    out << "}\n";
    out << "\n";
    out << "inline std::complex<__float128> operator-(\n";
    out << "        std::complex<__float128> const&c, \n";
    out << "        double                         a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c - std::complex<__float128>(a);\n";
    out << "}\n";
    out << "inline std::complex<__float128> operator-(\n";
    out << "        double                         a,\n";
    out << "        std::complex<__float128> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return std::complex<__float128>(a) - c;\n";
    out << "}\n";
    out << "\n";
    out << "inline std::complex<__float128> operator/(\n";
    out << "        std::complex<__float128> const&c, \n";
    out << "        double                         a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c / std::complex<__float128>(a);\n";
    out << "}\n";
    out << "inline std::complex<__float128> operator/(\n";
    out << "        double                         a,\n";
    out << "        std::complex<__float128> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return std::complex<__float128>(a) / c;\n";
    out << "}\n";
    out << "\n";
    out << "// Complex - complex operators\n";
    out << "\n";
    out << "inline std::complex<__float128> operator+(\n";
    out << "        std::complex<__float128> const&c, \n";
    out << "        std::complex<double>     const&a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c + std::complex<__float128>(a);\n";
    out << "}\n";
    out << "inline std::complex<__float128> operator+(\n";
    out << "        std::complex<double>     const&a,\n";
    out << "        std::complex<__float128> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c + std::complex<__float128>(a);\n";
    out << "}\n";
    out << "\n";
    out << "inline std::complex<__float128> operator*(\n";
    out << "        std::complex<__float128> const&c, \n";
    out << "        std::complex<double>     const&a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c * std::complex<__float128>(a);\n";
    out << "}\n";
    out << "inline std::complex<__float128> operator*(\n";
    out << "        std::complex<double>     const&a,\n";
    out << "        std::complex<__float128> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c * std::complex<__float128>(a);\n";
    out << "}\n";
    out << "\n";
    out << "inline std::complex<__float128> operator-(\n";
    out << "        std::complex<__float128> const&c, \n";
    out << "        std::complex<double>     const&a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c - std::complex<__float128>(a);\n";
    out << "}\n";
    out << "inline std::complex<__float128> operator-(\n";
    out << "        std::complex<double>     const&a,\n";
    out << "        std::complex<__float128> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return std::complex<__float128>(a) - c;\n";
    out << "}\n";
    out << "\n";
    out << "inline std::complex<__float128> operator/(\n";
    out << "        std::complex<__float128> const&c, \n";
    out << "        std::complex<double>     const&a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c / std::complex<__float128>(a);\n";
    out << "}\n";
    out << "inline std::complex<__float128> operator/(\n";
    out << "        std::complex<double>     const&a,\n";
    out << "        std::complex<__float128> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return std::complex<__float128>(a) / c;\n";
    out << "}\n";
    out << "\n";
    out << "///////////////////////////////////////////////////\n";
    out << "// quadruple / int operators\n";
    out << "///////////////////////////////////////////////////\n";
    out << "\n";
    out << "inline std::complex<__float128> operator+(\n";
    out << "        std::complex<__float128> const&c, \n";
    out << "        int                            a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c + std::complex<__float128>(a);\n";
    out << "}\n";
    out << "inline std::complex<__float128> operator+(\n";
    out << "        int                            a,\n";
    out << "        std::complex<__float128> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c + std::complex<__float128>(a);\n";
    out << "}\n";
    out << "\n";
    out << "inline std::complex<__float128> operator*(\n";
    out << "        std::complex<__float128> const&c, \n";
    out << "        int                            a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c * std::complex<__float128>(a);\n";
    out << "}\n";
    out << "inline std::complex<__float128> operator*(\n";
    out << "        int                            a,\n";
    out << "        std::complex<__float128> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c * std::complex<__float128>(a);\n";
    out << "}\n";
    out << "\n";
    out << "inline std::complex<__float128> operator-(\n";
    out << "        std::complex<__float128> const&c, \n";
    out << "        int                            a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c - std::complex<__float128>(a);\n";
    out << "}\n";
    out << "inline std::complex<__float128> operator-(\n";
    out << "        int                            a,\n";
    out << "        std::complex<__float128> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return std::complex<__float128>(a) - c;\n";
    out << "}\n";
    out << "\n";
    out << "inline std::complex<__float128> operator/(\n";
    out << "        std::complex<__float128> const&c, \n";
    out << "        int                            a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c / std::complex<__float128>(a);\n";
    out << "}\n";
    out << "inline std::complex<__float128> operator/(\n";
    out << "        int                            a,\n";
    out << "        std::complex<__float128> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return std::complex<__float128>(a) / c;\n";
    out << "}\n";
    out << "\n";
    out << "// Complex - complex operators\n";
    out << "\n";
    out << "inline std::complex<__float128> operator+(\n";
    out << "        std::complex<__float128> const&c, \n";
    out << "        std::complex<int>        const&a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c + std::complex<__float128>(a);\n";
    out << "}\n";
    out << "inline std::complex<__float128> operator+(\n";
    out << "        std::complex<int>        const&a,\n";
    out << "        std::complex<__float128> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c + std::complex<__float128>(a);\n";
    out << "}\n";
    out << "\n";
    out << "inline std::complex<__float128> operator*(\n";
    out << "        std::complex<__float128> const&c, \n";
    out << "        std::complex<int>        const&a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c * std::complex<__float128>(a);\n";
    out << "}\n";
    out << "inline std::complex<__float128> operator*(\n";
    out << "        std::complex<int>        const&a,\n";
    out << "        std::complex<__float128> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c * std::complex<__float128>(a);\n";
    out << "}\n";
    out << "\n";
    out << "inline std::complex<__float128> operator-(\n";
    out << "        std::complex<__float128> const&c, \n";
    out << "        std::complex<int>        const&a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c - std::complex<__float128>(a);\n";
    out << "}\n";
    out << "inline std::complex<__float128> operator-(\n";
    out << "        std::complex<int>        const&a,\n";
    out << "        std::complex<__float128> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return std::complex<__float128>(a) - c;\n";
    out << "}\n";
    out << "\n";
    out << "inline std::complex<__float128> operator/(\n";
    out << "        std::complex<__float128> const&c, \n";
    out << "        std::complex<int>        const&a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c / std::complex<__float128>(a);\n";
    out << "}\n";
    out << "inline std::complex<__float128> operator/(\n";
    out << "        std::complex<int>        const&a,\n";
    out << "        std::complex<__float128> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return std::complex<__float128>(a) / c;\n";
    out << "}\n";
    out << "\n";
    out << "inline std::ostream &operator<<(\n";
    out << "        std::ostream &out,\n";
    out << "        __float128    x\n";
    out << "        )\n";
    out << "{\n";
    out << "    out << (double)x;\n";
    out << "    return out;\n";
    out << "}\n";
    out << "\n";
    out << "inline std::ostream &operator<<(\n";
    out << "        std::ostream &out,\n";
    out << "        __complex128  z\n";
    out << "        )\n";
    out << "{\n";
    out << "    out << \"(\" << crealq(z) << \" + i*\" << cimagq(z) << "
           "\")\";\n";
    out << "    return out;\n";
    out << "}\n";
    out << "\n";
    out << "#endif\n";
    out << "\n";
    out << "///////////////////////////////////////////////////\n";
    out << "// double / int operators\n";
    out << "///////////////////////////////////////////////////\n";
    out << "\n";
    out << "inline std::complex<double> operator+(\n";
    out << "        std::complex<double> const&c, \n";
    out << "        int                            a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c + std::complex<double>(a);\n";
    out << "}\n";
    out << "inline std::complex<double> operator+(\n";
    out << "        int                            a,\n";
    out << "        std::complex<double> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c + std::complex<double>(a);\n";
    out << "}\n";
    out << "\n";
    out << "inline std::complex<double> operator*(\n";
    out << "        std::complex<double> const&c, \n";
    out << "        int                            a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c * std::complex<double>(a);\n";
    out << "}\n";
    out << "inline std::complex<double> operator*(\n";
    out << "        int                            a,\n";
    out << "        std::complex<double> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c * std::complex<double>(a);\n";
    out << "}\n";
    out << "\n";
    out << "inline std::complex<double> operator-(\n";
    out << "        std::complex<double> const&c, \n";
    out << "        int                            a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c - std::complex<double>(a);\n";
    out << "}\n";
    out << "inline std::complex<double> operator-(\n";
    out << "        int                            a,\n";
    out << "        std::complex<double> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return std::complex<double>(a) - c;\n";
    out << "}\n";
    out << "\n";
    out << "inline std::complex<double> operator/(\n";
    out << "        std::complex<double> const&c, \n";
    out << "        int                            a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c / std::complex<double>(a);\n";
    out << "}\n";
    out << "inline std::complex<double> operator/(\n";
    out << "        int                            a,\n";
    out << "        std::complex<double> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return std::complex<double>(a) / c;\n";
    out << "}\n";
    out << "\n";
    out << "// Complex - complex operators\n";
    out << "\n";
    out << "inline std::complex<double> operator+(\n";
    out << "        std::complex<double> const&c, \n";
    out << "        std::complex<int>        const&a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c + std::complex<double>(a.real(), a.imag());\n";
    out << "}\n";
    out << "inline std::complex<double> operator+(\n";
    out << "        std::complex<int>        const&a,\n";
    out << "        std::complex<double> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c + std::complex<double>(a.real(), a.imag());\n";
    out << "}\n";
    out << "\n";
    out << "inline std::complex<double> operator*(\n";
    out << "        std::complex<double> const&c, \n";
    out << "        std::complex<int>        const&a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c * std::complex<double>(a.real(), a.imag());\n";
    out << "}\n";
    out << "inline std::complex<double> operator*(\n";
    out << "        std::complex<int>        const&a,\n";
    out << "        std::complex<double> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c * std::complex<double>(a.real(), a.imag());\n";
    out << "}\n";
    out << "\n";
    out << "inline std::complex<double> operator-(\n";
    out << "        std::complex<double> const&c, \n";
    out << "        std::complex<int>        const&a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c - std::complex<double>(a.real(), a.imag());\n";
    out << "}\n";
    out << "inline std::complex<double> operator-(\n";
    out << "        std::complex<int>        const&a,\n";
    out << "        std::complex<double> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return std::complex<double>(a.real(), a.imag()) - c;\n";
    out << "}\n";
    out << "\n";
    out << "inline std::complex<double> operator/(\n";
    out << "        std::complex<double> const&c, \n";
    out << "        std::complex<int>        const&a\n";
    out << "        )\n";
    out << "{\n";
    out << "    return c / std::complex<double>(a.real(), a.imag());\n";
    out << "}\n";
    out << "inline std::complex<double> operator/(\n";
    out << "        std::complex<int>        const&a,\n";
    out << "        std::complex<double> const&c\n";
    out << "        )\n";
    out << "{\n";
    out << "    return std::complex<double>(a.real(), a.imag()) / c;\n";
    out << "}\n";
    out << "\n";
    out << "#endif\n";
}

} // End of namespace csl
